GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/saya/bprog2022/.ghci
2022-05-19 15:41:33.6193798
>>> 23+5
28
2022-05-19 15:54:14.3086541
>>> >>>3+2*5

<interactive>:2:1: error: parse error on input ‘>>>’
2022-05-19 15:55:48.5688258
>>> 3+2*5
13
2022-05-19 15:56:23.4815413
>>> (3+2)*5
25
2022-05-19 15:56:52.5679748
>>> 5-4-8
-7
2022-05-19 15:57:02.4829634
>>> sqrt 2
1.4142135623730951
2022-05-19 15:59:33.0639998
>>> double 3

<interactive>:7:1: error: Variable not in scope: double :: t0 -> t
2022-05-19 16:02:03.6035972
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/saya/bprog2022/.ghci
2022-05-26 15:02:14.5947464
>>> maxBound::Int
9223372036854775807
2022-05-26 15:03:35.9265436
>>> maxBound :: Int
9223372036854775807
2022-05-26 15:04:12.0650648
>>> 2 ^63-1
9223372036854775807
2022-05-26 15:05:03.0406824
>>> minBound :: Int
-9223372036854775808
2022-05-26 15:05:37.021068
>>> minBound :: Int
-9223372036854775808
2022-05-26 15:21:01.8908595
>>> minBound :: Int
-9223372036854775808
2022-05-26 15:24:09.5020991
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
Ok, no modules loaded.
2022-05-26 15:49:03.6792626
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-05-26 15:49:03.7499888
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + y
   5  
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:4:16: error: Variable not in scope: y :: Int
  |
4 | double x = x + y
  |                ^
Failed, no modules loaded.
2022-05-26 15:52:57.5954696
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:4:16: error: Variable not in scope: y :: Int
  |
4 | double x = x + y
  |                ^
Failed, no modules loaded.
2022-05-26 15:52:57.6906069
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + X
   5  
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:4:16: error: Data constructor not in scope: X :: Int
  |
4 | double x = x + X
  |                ^
Failed, no modules loaded.
2022-05-26 15:53:50.3325361
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:4:16: error: Data constructor not in scope: X :: Int
  |
4 | double x = x + X
  |                ^
Failed, no modules loaded.
2022-05-26 15:53:50.4296642
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-05-26 15:55:55.3087685
>>> double 3
6
2022-05-26 15:56:32.7027622
>>> double 6
12
2022-05-26 15:56:47.009364
>>> double 8
16
2022-05-26 15:56:56.4319263
>>> doublr (1+2)

<interactive>:17:1: error:
    • Variable not in scope: doublr :: t0 -> t
    • Perhaps you meant ‘double’ (line 4)
2022-05-26 15:57:29.0722129
>>> doublr (1 + 2)

<interactive>:18:1: error:
    • Variable not in scope: doublr :: t0 -> t
    • Perhaps you meant ‘double’ (line 4)
2022-05-26 15:57:55.7456353
>>> double (1+2)
6
2022-05-26 15:58:23.9807144
>>> :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/saya/bprog2022/.ghci
2022-06-09 14:54:57.5116019
>>> 2+3*4
14
2022-06-09 14:57:51.4736143
>>> (2+3)*4
20
2022-06-09 14:59:58.7658451
>>> :i sqrt
type Floating :: * -> Constraint
class Fractional a => Floating a where
  ...
  sqrt :: a -> a
  ...
  	-- Defined in ‘GHC.Float’
2022-06-09 15:01:15.6913763
>>> sqrt (3^2+4^2)
5.0
2022-06-09 15:03:17.1402537
>>> sqrt (25::Int)

<interactive>:5:1: error:
    • No instance for (Floating Int) arising from a use of ‘sqrt’
    • In the expression: sqrt (25 :: Int)
      In an equation for ‘it’: it = sqrt (25 :: Int)
2022-06-09 15:08:10.9950863
>>> sqrt (25::Double)
5.0
2022-06-09 15:09:41.0182136
>>> hoge 225::Int

<interactive>:7:1: error: Variable not in scope: hoge :: t0 -> Int
2022-06-09 15:13:32.882701
>>> hoge 25::Int

<interactive>:8:1: error: Variable not in scope: hoge :: t0 -> Int
2022-06-09 15:15:26.9127739
>>> head[1,2,3]
1
2022-06-09 15:46:40.3059894
>>> head[3,1,4,1,5]
3
2022-06-09 15:47:12.3401175
>>> head[]
*** Exception: Prelude.head: empty list
2022-06-09 15:48:30.9429812
>>> hoge=[3,1,4,1,5]::[Int]
2022-06-09 15:50:55.4268071
>>> hoge
[3,1,4,1,5]
2022-06-09 15:51:12.1116685
>>> head hoge
3
2022-06-09 15:51:35.4386875
>>> tail hoge
[1,4,1,5]
2022-06-09 15:51:52.7947622
>>> tail[]
*** Exception: Prelude.tail: empty list
2022-06-09 15:52:33.8263275
>>> hoge!!0
3
2022-06-09 15:55:10.0420972
>>> hoge 2 !! 

<interactive>:18:11: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-06-09 15:56:18.1331267
>>> hoge!!2
4
2022-06-09 15:56:57.1262122
>>> take 3 hoge
[3,1,4]
2022-06-09 15:57:21.1467806
>>> hogee

<interactive>:21:1: error:
    • Variable not in scope: hogee
    • Perhaps you meant ‘hoge’ (line 12)
2022-06-09 15:57:30.9367187
>>> hoge
[3,1,4,1,5]
2022-06-09 15:57:37.2759776
>>> drop 3 hoge
[1,5]
2022-06-09 15:57:56.9064427
>>> hoge 5 hoge

<interactive>:24:1: error:
    • Couldn't match expected type: t0 -> [Int] -> t
                  with actual type: [Int]
    • The function ‘hoge’ is applied to two value arguments,
        but its type ‘[Int]’ has none
      In the expression: hoge 5 hoge
      In an equation for ‘it’: it = hoge 5 hoge
    • Relevant bindings include it :: t (bound at <interactive>:24:1)
2022-06-09 15:58:30.2758631
>>> hoge!!5
*** Exception: Prelude.!!: index too large
2022-06-09 15:59:01.8389564
>>> take10

<interactive>:26:1: error:
    • Variable not in scope: take10
    • Perhaps you meant ‘take’ (imported from Prelude)
2022-06-09 15:59:13.5451604
>>> take10 hoge

<interactive>:27:1: error:
    • Variable not in scope: take10 :: [Int] -> t
    • Perhaps you meant ‘take’ (imported from Prelude)
2022-06-09 15:59:36.1550579
>>> take 10 hoge
[3,1,4,1,5]
2022-06-09 15:59:58.2634217
>>> drop 10 hoge
[]
2022-06-09 16:00:11.5434313
>>> length head

<interactive>:30:1: error:
    • No instance for (Foldable ((->) [a0]))
        arising from a use of ‘length’
    • In the expression: length head
      In an equation for ‘it’: it = length head
2022-06-09 16:01:00.6170418
>>> length hoge
5
2022-06-09 16:01:20.293513
>>> length []
0
2022-06-09 16:01:37.7646558
>>> sum hoge
14
2022-06-09 16:02:04.9018467
>>> product hoge
60
2022-06-09 16:03:05.1798592
>>> hoge ++ hoge
[3,1,4,1,5,3,1,4,1,5]
2022-06-09 16:04:46.8220115
>>> reverse hoge
[5,1,4,1,3]
2022-06-09 16:05:40.6689754
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
Ok, no modules loaded.
2022-06-09 16:07:55.8588345
>>> :load src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-09 16:07:55.9188157
>>> double 3+3
9
2022-06-09 16:08:28.9029522
>>> doule (3+3)

<interactive>:40:1: error:
    • Variable not in scope: doule :: t0 -> t
    • Perhaps you meant ‘double’ (line 4)
2022-06-09 16:11:34.7810421
>>> double (3 + 3)
12
2022-06-09 16:12:08.8373235
>>> :guit
unknown command ':guit'
use :? for help.
2022-06-09 16:20:07.0590725
>>> :quit
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/saya/bprog2022/.ghci
2022-06-16 15:03:32.8783836
>>> take 3 [3,1,1,5]
[3,1,1]
2022-06-16 15:04:28.1304951
>>> take 3 [3,1,4,1,5]
[3,1,4]
2022-06-16 15:05:01.6213442
>>> :e src/Firs.hs
catn: src/Firs.hs: openFile: does not exist (No such file or directory)
2022-06-16 15:10:47.3669507
>>> :l src/Firs.hs

<no location info>: error: can't find file: src/Firs.hs
Failed, no modules loaded.
2022-06-16 15:10:47.4385084
>>> double

<interactive>:5:1: error: Variable not in scope: double
2022-06-16 15:12:55.042216
>>> take (double 2)

<interactive>:6:7: error:
    Variable not in scope: double :: t0 -> Int
2022-06-16 15:15:08.5210405
>>> src/First.hs

<interactive>:7:5: error:
    Not in scope: ‘First.hs’
    No module named ‘First’ is imported.
2022-06-16 15:16:37.5604044
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x =double (double x)

<no location info>: error: can't find file: src/Firs.hs
Failed, no modules loaded.
2022-06-16 15:17:41.9577322
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:17:42.041657
>>> double

<interactive>:10:1: error:
    • No instance for (Show (Int -> Int)) arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-06-16 15:18:35.8323921
>>> taek (double 2)

<interactive>:11:1: error:
    • Variable not in scope: taek :: Int -> t
    • Perhaps you meant ‘take’ (imported from Prelude)
2022-06-16 15:19:12.5208534
>>> take(double2)

<interactive>:12:6: error:
    • Variable not in scope: double2 :: Int
    • Perhaps you meant ‘double’ (line 4)
2022-06-16 15:19:57.2265141
>>> take (double 2 )

<interactive>:13:1: error:
    • No instance for (Show ([a0] -> [a0]))
        arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-06-16 15:20:09.0575643
>>> take (doule 2) [1,2,3,4,5]

<interactive>:14:7: error:
    • Variable not in scope: doule :: t0 -> Int
    • Perhaps you meant ‘double’ (line 4)
2022-06-16 15:21:14.7553387
>>> take (double 2) [1,2,3,4,5]
[1,2,3,4]
2022-06-16 15:21:41.3643358
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x =double (double x)
   8  
   9  factrial::Integer -> Integer
  10  factrial n=probuct[1..n]
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:10:12: error:
    • Variable not in scope: probuct :: [Integer] -> Integer
    • Perhaps you meant ‘product’ (imported from Prelude)
   |
10 | factrial n=probuct[1..n]
   |            ^^^^^^^
Failed, no modules loaded.
2022-06-16 15:24:03.9513811
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x =double (double x)
   8  
   9  factrial::Integer -> Integer
  10  factrial n = product [1..n]
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:25:52.2302792
>>> factrial 3
6
2022-06-16 15:26:25.5097215
>>> factrial 4
24
2022-06-16 15:26:43.2289538
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x =double (double x)
   8  
   9  factrial::Integer -> Integer
  10  factrial n = product [1..n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int -> Int
  16  ave xs = div (sum xs)(length xs)
  17  
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:16:10: error:
    • Couldn't match expected type ‘Int -> Int’ with actual type ‘Int’
    • Possible cause: ‘div’ is applied to too many arguments
      In the expression: div (sum xs) (length xs)
      In an equation for ‘ave’: ave xs = div (sum xs) (length xs)
   |
16 | ave xs = div (sum xs)(length xs)
   |          ^^^^^^^^^^^^^^^^^^^^^^^
Failed, no modules loaded.
2022-06-16 15:38:08.001953
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x =double (double x)
   8  
   9  factrial::Integer -> Integer
  10  factrial n = product [1..n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:16:10: error:
    • Couldn't match expected type ‘Int -> Int’ with actual type ‘Int’
    • Possible cause: ‘div’ is applied to too many arguments
      In the expression: div (sum xs) (length xs)
      In an equation for ‘ave’: ave xs = div (sum xs) (length xs)
   |
16 | ave xs = div (sum xs) (length xs)
   |          ^^^^^^^^^^^^^^^^^^^^^^^^
Failed, no modules loaded.
2022-06-16 15:38:43.3197788
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x =double (double x)
   8  
   9  factrial::Integer -> Integer
  10  factrial n = product [1..n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int 
  16  ave xs = div (sum xs) (length xs)
  17  
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:40:50.5151559
>>> average[1,2,3,4,5]
3
2022-06-16 15:45:12.5745152
>>> 
2022-06-16 15:49:38.5390257
>>> t take 3[1,2,3,4,5]

<interactive>:25:1: error:
    Variable not in scope:
      t :: (Int -> [a0] -> [a0]) -> t0 -> [a1] -> t
2022-06-16 15:50:06.0264892
>>> t take 3 [1,2,3,4,5]

<interactive>:26:1: error:
    Variable not in scope:
      t :: (Int -> [a0] -> [a0]) -> t0 -> [a1] -> t
2022-06-16 15:50:35.3955312
>>> 
2022-06-16 16:06:49.0076787
>>> init [1 .. 5]
[1,2,3,4]
2022-06-16 16:07:11.6409429
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x =double (double x)
   8  
   9  factrial::Integer -> Integer
  10  factrial n = product [1..n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int 
  16  ave xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x[]) = []
  20  myinit (x:xs)  = x : (init xs)
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:19:9: error: Parse error in pattern: x
   |
19 | myinit (x[]) = []
   |         ^^^
Failed, no modules loaded.
2022-06-16 16:14:29.0464499
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x =double (double x)
   8  
   9  factrial::Integer -> Integer
  10  factrial n = product [1..n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int 
  16  ave xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs)  = x : (init xs)
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 16:15:22.3977581
>>> myinit [1..5]
[1,2,3,4]
2022-06-16 16:15:49.1656729
>>> myinit []
*** Exception: src/First.hs:(19,1)-(20,30): Non-exhaustive patterns in function myinit

2022-06-16 16:16:10.6489554
>>> :t take 3[1,2,3,4,5]
take 3[1,2,3,4,5] :: Num a => [a]
2022-06-16 16:19:01.511632
>>> :q
Leaving GHCi.
